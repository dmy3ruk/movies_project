import json

from django.shortcuts import render
from imdb import Cinemagoer
import re
from movies_project.models import movies

def signIn(request):
    render('sign.html')
def home(request):
    new_posters = []
    top10_posters = []
    popular_posters = []

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ–ª—å–º–∏
    movies_new = movies.objects.all().order_by('release_date')[:10]
    movies_top10 = movies.objects.all().order_by('-vote_average')[:10]
    movies_popular = movies.objects.all().order_by('-vote_count')[:10]

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è IMDb API
    ia = Cinemagoer()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç–µ—Ä—ñ–≤
    posters_new = find_movie_id(ia, movies_new)
    posters_top10 = find_movie_id(ia, movies_top10)
    posters_popular = find_movie_id(ia, movies_popular)

    return render(request, 'index.html', {
        'new_posters': posters_new,
        'top10_posters': posters_top10,
        'popular_posters': posters_popular
    })
from django.core.cache import cache


def find_movie_id(ia, movies_array):
    posters_data = []
    for movie in movies_array:
        if not movie.home_page:
            print(f"‚ö†Ô∏è –£ —Ñ—ñ–ª—å–º–∞ {movie.movie_name} –Ω–µ–º–∞—î home_page")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–ª—å–º –±–µ–∑ home_page

        match = re.search(r'tt(\d+)', movie.home_page)  # –ó–∞—Ö–æ–ø–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞
        if not match:
            print(f"‚ùå IMDb ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ home_page: {movie.home_page}")
            continue

        imdb_id = match.group(1)  # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—à–µ —á–∏—Å–ª–æ–≤—É —á–∞—Å—Ç–∏–Ω—É ID
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ IMDb ID: {imdb_id}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–ª—è –ø–æ—Å—Ç–µ—Ä–∞
        poster_url = cache.get(imdb_id)
        if poster_url:
            print(f"üîÑ –ü–æ—Å—Ç–µ—Ä –¥–ª—è {imdb_id} –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à—ñ")
            posters_data.append({'poster_url': poster_url})
            continue

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç —Ñ—ñ–ª—å–º—É –∑ –ë–î
        mv = movies.objects.filter(movie_name=movie.movie_name).first()  # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ .values()

        if mv and mv.poster_url:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ—Å—Ç–µ—Ä —É –ë–î
            poster_url = mv.poster_url
        else:
            try:
                movie_data = ia.get_movie(imdb_id)  # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ
                print(f"üìù –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ IMDb: {movie_data}")  # –î–ª—è –¥–µ–±–∞–≥—É
                poster_url = movie_data.get('full-size cover url')
                if poster_url:
                    print(f"üåü –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Å—Ç–µ—Ä: {poster_url}")
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ —É –ë–î
                    if mv:
                        mv.poster_url = poster_url
                        mv.save(update_fields=['poster_url'])
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ IMDb –¥–ª—è {imdb_id}: {e}")
                poster_url = None

        if poster_url:
            posters_data.append({'movie_name': movie.movie_name, 'poster_url': poster_url})

    return posters_data
def get_media_type(mv):

    for movie in mv:
        home_page = movie.home_page  # –í–∏—Ç—è–≥—É–≤–∞—Ç–∏ home_page –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É/—Å–µ—Ä—ñ–∞–ª—É
        print(f"–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ñ—ñ–ª—å–º/—Å–µ—Ä—ñ–∞–ª: {movie.movie_name}")  # –í–∏–≤–æ–¥–∏–º–æ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è

        # –í–∏—Ç—è–≥–Ω—É—Ç–∏ IMDb ID –∑ home_page
        match = re.search(r'tt(\d+)', home_page)  # –®—É–∫–∞—î–º–æ "tt" —Ç–∞ –Ω–æ–º–µ—Ä
        if not match:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ IMDb ID —É {home_page}")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

        imdb_id = match.group(1)
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ IMDb ID: {imdb_id}")

        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç —Ñ—ñ–ª—å–º—É/—Å–µ—Ä—ñ–∞–ª—É –∑–∞ ID
            ia = Cinemagoer()  # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É
            media = ia.get_movie(imdb_id)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –º–µ–¥—ñ–∞
            if 'series' in media['kind']:
                print(f"–°–µ—Ä—ñ–∞–ª: {movie.movie_name}")
                movie.media_type = 'serial'  # –ú–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–∏–ø —É –±–∞–∑—É
            elif 'movie' in media['kind']:
                print(f"–§—ñ–ª—å–º: {movie.movie_name}")
                movie.media_type = 'film'  # –ú–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–∏–ø —É –±–∞–∑—É
            else:
                print(f"–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ: {movie.movie_name}")
                movie.media_type = 'unknown'

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            movie.save()
            print(f"–¢–∏–ø –º–µ–¥—ñ–∞ –¥–ª—è {movie.movie_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö.")

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ IMDb –¥–ª—è {imdb_id}: {e}")
            continue  # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –∑–∞–ø–∏—Å

def genres_films(request, genre):
    print(genre)

    genre = genre.capitalize()
    mv = movies.objects.filter(genres__contains=genre).order_by('vote_average')
    films_posters = movies.objects.filter(genres__contains=genre).order_by('-release_date').filter(media_type='film')
    ia = Cinemagoer()
    posters_data = find_movie_id(ia,films_posters)

    for movie in mv:
        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏, —è–∫—â–æ media_type –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ
        if movie.media_type in ['serial', 'film', 'unknown']:
            print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ {movie.movie_name}, –±–æ media_type –≤–∂–µ —î: {movie.media_type}")
            continue

        if not movie.home_page:
            print(f"‚ö†Ô∏è –£ —Ñ—ñ–ª—å–º–∞ {movie.movie_name} –Ω–µ–º–∞—î home_page")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ—ñ–ª—å–º –±–µ–∑ home_page

        match = re.search(r'tt(\d+)', movie.home_page)  # –ó–∞—Ö–æ–ø–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞
        if not match:
            print(f"‚ùå IMDb ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ home_page: {movie.home_page}")
            continue

        imdb_id = match.group(1)  # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—à–µ —á–∏—Å–ª–æ–≤—É —á–∞—Å—Ç–∏–Ω—É ID
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ IMDb ID: {imdb_id}")
        try:
            ia = Cinemagoer()
            media = ia.get_movie(imdb_id)

            print(media)
            if 'series' in media['kind']:
                print(f"–°–µ—Ä—ñ–∞–ª: {movie.movie_name}")
                movie.media_type = 'serial'
            elif 'movie' in media['kind']:
                print(f"–§—ñ–ª—å–º: {movie.movie_name}")
                movie.media_type = 'film'
            else:
                print(f"–ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ: {movie.movie_name}")
                movie.media_type = 'unknown'

            movie.save(update_fields=['media_type'])
            print(f"–¢–∏–ø –º–µ–¥—ñ–∞ –¥–ª—è {movie.movie_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö.")

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ IMDb –¥–ª—è {imdb_id}: {e}")

    print(posters_data)  # For debugging (you can remove this in production)

    print(mv)

    return render(request, 'action.html', { 'posters_data': posters_data, "genre": genre })


