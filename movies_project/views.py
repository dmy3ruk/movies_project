from django.shortcuts import render
from imdb import IMDb
from imdb import Cinemagoer

import re
from movies_project.models import movies
from django.core.cache import cache  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–µ—à


def home(request):
    # ia =imdb.IMDb()
    new_posters = []
    top10_posters = []
    popular_posters = []
    movies_with_ratings = []

    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à—ñ 10 —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ –¥–∞—Ç–æ—é –≤–∏–ø—É—Å–∫—É
    movies_new = movies.objects.all().order_by('release_date')[:10]
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à—ñ 10 —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ —Å–µ—Ä–µ–¥–Ω—ñ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    movies_top10 = movies.objects.all().order_by('-vote_average')[:10]  # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º!
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ñ—ñ–ª—å–º–∏
    movies_popular = movies.objects.all().order_by('-vote_count')[:10]
    # –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ –∂–∞–Ω—Ä–æ–º "Action"

    ia = Cinemagoer('http')
    movies_ia = ia.get_popular100_movies()
    # –°–æ—Ä—Ç—É—î–º–æ —Ñ—ñ–ª—å–º–∏ –∑–∞ –¥–∞—Ç–æ—é –≤–∏–ø—É—Å–∫—É —É –ø–æ—Ä—è–¥–∫—É —Å–ø–∞–¥–∞–Ω–Ω—è (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Ñ—ñ–ª—å–º–∏ –ø–µ—Ä—à–∏–º–∏)
    sorted_movies_by_year = sorted(movies_ia, key=lambda movie: movie['year'], reverse=True)

    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ñ—ñ–ª—å–º –ø—ñ—Å–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    first_movie = sorted_movies_by_year[10]
    movie_id = first_movie.getID()
    movie_data = ia.get_movie(movie_id)
    poster_url_1 = movie_data.get('full-size cover url')
    print(poster_url_1)
    # –í–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π —Ñ—ñ–ª—å–º –∑ –π–æ–≥–æ –¥–µ—Ç–∞–ª—è–º–∏
    imdb_id = first_movie.getID()  # –û—Ç—Ä–∏–º—É—î–º–æ IMDb ID
    print(f"Title: {first_movie['title']}, Year: {first_movie['year']}, IMDb ID: {imdb_id}")
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ—ñ–ª—å–º—ñ–≤ –∑ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
    # movies_with_ratings = []
    # for movie in movies_ia:
    #     movie_id = movie.get('imdbID')
    #     if movie_id:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î imdbID
    #         movie_data = ia.get_movie(movie_id[2:])  # ID –±–µ–∑ 'tt' –ø—Ä–µ—Ñ—ñ–∫—Å–∞
    #         rating = movie_data.get('rating')  # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥
    #         if rating is not None:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ä–µ–π—Ç–∏–Ω–≥
    #             movies_with_ratings.append({
    #                 'title': movie_data['title'],
    #                 'rating': rating,
    #                 'poster': movie_data.get('cover url')
    #             })
    # print(movies_with_ratings)
    # # –°–æ—Ä—Ç—É—î–º–æ —Ñ—ñ–ª—å–º–∏ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    # sorted_movies = sorted(movies_with_ratings, key=lambda x: x['rating'], reverse=True)
    #
    # # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å—Ç–µ—Ä –¥–ª—è —Ñ—ñ–ª—å–º—É –∑ –Ω–∞–π–≤–∏—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    # if sorted_movies:
    #     top_movie = sorted_movies[0]
    #     print(f"–ù–∞–π–∫—Ä–∞—â–∏–π —Ñ—ñ–ª—å–º: {top_movie['title']}")
    #     print(f"–†–µ–π—Ç–∏–Ω–≥: {top_movie['rating']}")
    #     print(f"–ü–æ—Å—Ç–µ—Ä: {top_movie['poster'] if top_movie['poster'] else '–ü–æ—Å—Ç–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
    # else:
    #     print("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ–ª—å–º—ñ–≤ –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º.")


    # –î–ª—è –Ω–æ–≤–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤
    for movie in movies_new:
        imdb_id, poster_url = find_movie_id(movie, ia)
        if imdb_id and poster_url:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            new_posters.append({'imdb_id': imdb_id, 'poster_url': poster_url})

    # –î–ª—è —Ç–æ–ø-10 —Ñ—ñ–ª—å–º—ñ–≤
    for movie in movies_top10:
        imdb_id, poster_url = find_movie_id(movie, ia)
        if imdb_id and poster_url:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            top10_posters.append({'imdb_id': imdb_id, 'poster_url': poster_url})

    # –î–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤
    for movie in movies_popular:
        imdb_id, poster_url = find_movie_id(movie, ia)
        if imdb_id and poster_url:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            popular_posters.append({'imdb_id': imdb_id, 'poster_url': poster_url})

    return render(request, 'index.html',
                  {'new_posters': new_posters, 'top10_posters': top10_posters, 'popular_posters': popular_posters}, poster_url_1)


def find_movie_id(movie, ia):
    if not movie.home_page:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î home_page
        print(f"‚ö†Ô∏è –£ —Ñ—ñ–ª—å–º–∞ {movie} –Ω–µ–º–∞—î home_page")
        return None, None

    match = re.search(r'tt\d+', movie.home_page)
    if not match:
        print(f"‚ùå IMDb ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ home_page: {movie.home_page}")
        return None, None

    imdb_id = match.group(0)
    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ IMDb ID: {imdb_id}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à –¥–ª—è –ø–æ—Å—Ç–µ—Ä–∞
    cache_key = f"poster_{imdb_id}"
    poster_url = cache.get(cache_key)

    if poster_url:
        print(f"üéâ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç–µ—Ä –¥–ª—è {imdb_id}")
        return imdb_id, poster_url

    # –Ø–∫—â–æ –ø–æ—Å—Ç–µ—Ä–∞ –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ, –∑–∞–ø–∏—Ç—É—î–º–æ IMDb
    try:
        movie_id = ia.get_movie(imdb_id[2:])
        poster_url = movie_id.get('full-size cover url')
        print(f"üåü –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Å—Ç–µ—Ä: {poster_url}")

        if poster_url:
            cache.set(cache_key, poster_url, timeout=2592000)  # –ö–µ—à—É—î–º–æ –Ω–∞ 30 –¥–Ω—ñ–≤

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ IMDb –¥–ª—è {imdb_id}: {e}")
        poster_url = None

    return imdb_id, poster_url
